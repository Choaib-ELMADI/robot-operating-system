> ros2 -h                                                       ==> Get help about ros2 packages

> sudo apt install ros-< d >-< p >                              ==> Install a new package, d for your ros distribution and p for package
> ros2 pkg list                                                 ==> List installed packages
> ros2 pkg executables < p >                                    ==> List the executable files within the package p

> ros2 run < p > < n >                                          ==> Run a ros node, p for package and n for node

> rqt                                                           ==> Provides a flexible environment for various ros tools
> rqt_graph                                                     ==> Visualize the communication between different nodes

> mkdir -p ros2_ws/src                                          ==> Create a local workspace
> ros2 pkg create --build-type < t > --node-name < n > < p >    ==> Create a package with a node, t = ament_cmake or ament_python (inside ros2_ws/src)
> colcon build                                                  ==> Build packages (inside ros2_ws)
> source install/setup.bash                                     ==> Source the workspace (inside ros2_ws)

> ros2 node list                                                ==> List all active nodes
> ros2 node info < n >                                          ==> Get info about the node n

> ros2 interface proto < i >                                    ==> Show the prototype of the interface i
> ros2 interface show < i >                                     ==> Show the interface definition

> ros2 service list                                             ==> List available services
> ros2 service list -t                                          ==> List available services with their types
> ros2 service call < s > < t > < v >                           ==> Call the service s, t for service type and v for service value

> ros2 action list                                              ==> List all available actions
> ros2 action list -t                                           ==> List all available actions with their types
> ros2 action info < a >                                        ==> Get action info, a for action name
> ros2 action send_goal < a > < t > < g >                       ==> Send an action goal request, a for action name, t for type and g for goal
> ros2 action send_goal -f < a > < t > < g >                    ==> Send an action goal request and view feedback

> ros2 param list                                               ==> Show available parameters for currently running nodes
> ros2 param get < n > < p >                                    ==> Get the value for param p in node n
> ros2 param set < n > < p > < v >                              ==> Set value v for param p in node n
> ros2 param delete < n > < p >                                 ==> Delete the param p in node n
> ros2 param describe < n > < p >                               ==> Show descriptive info about param p in node n
> ros2 param dump < n >                                         ==> Save the parameters of a node into a file
> ros2 run < p > < n > --ros-args --params-file file.yaml       ==> Run a node with custom already saved parameters

> ros2 launch path_to_launch_file.py                            ==> Run a launch file

> ros2 topic list                                               ==> List all available topics
> ros2 topic list -t                                            ==> List all available topics with their types
> ros2 topic pub < n > < t > < v >                              ==> Publish to the topic with name n, t for type and v for value
